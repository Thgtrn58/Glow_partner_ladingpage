// Cấu hình email và spreadsheet
const CONFIG = {
  ADMIN_EMAIL: 'partner@glowvietnam.com',
  SPREADSHEET_ID: SpreadsheetApp.getActiveSpreadsheet().getId(),
  COMPANY_INFO: {
    // Sử dụng URL trực tiếp từ Google Drive với format đặc biệt
    LOGO_URL: 'https://lh3.googleusercontent.com/d/1RDyOH2NRA12amBJn56MSSdExUHlV8p05',
    SOCIAL_LINKS: {
      LINKEDIN: 'https://www.linkedin.com/company/glowvietnam',
      FACEBOOK: 'https://www.facebook.com/glowvietnam',
      WEBSITE: 'https://glowvietnam.com'
    }
  },
  TEMPLATE_ID: "477985",
  CODE_VERIFYER: "idTywBLDKAI1SPIypFftWmuOOLMAq9rcfx5XDdLNFkpuMt3Z2rzrMNdTdE_Zy7YC",
  APP_ID: "2988166152241541433",
  AUTH_CODE: "jEg_4Gb6U1QZeO8wA1XU1hA-eYT2C7O9_x7G7qGnBIR8kzycL5mZ3EAInZ1l2mSNduZVFo8pBXMRfkeT5JGzA8xMnG0ILoerfjZSA55T4mNitQmJQavp6ERT-pnR5dbFdV7x5aPnEokrvl9WK3u7A9JjrbzzPm1h_u7qLsCV1LJjYz0_60WO0zNE-KW3EMqJzVh-E6mV1WhZfyWN4a1f4foxf2vyP5vixuFADZb611BM-BbX1nDuTCUyeqT6AnTUcVpW65WriHFbddPbINZvlFB29xvmNUkVWeeRuv4yZkGut66TKtLdtcBBYCpUHQYM-3vTXJk9dSZtQ2-gO9hxnuDfEfO5zjt5a2XYi7saqeViDcV5MIRpAtOM0qHEA0",
  SECRET_KEY: "JFRnDLDSU0lKEhMbCIVD"
};

const PROPERTY = PropertiesService.getScriptProperties(); 

/**
 * Tạo template email cho Kỹ thuật viên
 */
function createTechnicianEmailBody(data) {
  return `<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Glow - Xác nhận đăng ký Kỹ thuật viên</title>
<style>
body, #bodyTable { background-color: rgb(244, 244, 244); }
.mceText, .mcnTextContent, .mceLabel { font-family: "Helvetica Neue", Helvetica, Arial, Verdana, sans-serif; }
.mceText, .mcnTextContent, .mceLabel { color: rgb(0, 0, 0); }
.mceText h1 { margin-bottom: 0px; }
.mceText p { margin-bottom: 0px; }
.mceText label { margin-bottom: 0px; }
.mceText input { margin-bottom: 0px; }
.mceText h1 { margin-bottom: 0px; }
.mceText p { margin-bottom: 0px; }
.mceText label { margin-bottom: 0px; }
.mceText input { margin-bottom: 0px; }
.mceText p, .mcnTextContent p { color: rgb(0, 0, 0); font-family: "Helvetica Neue", Helvetica, Arial, Verdana, sans-serif; font-size: 16px; font-weight: normal; line-height: 1.5; mso-line-height-alt: 150%; text-align: center; letter-spacing: 0px; direction: ltr; margin: 0px; }
.mceText h1, .mcnTextContent h1 { color: rgb(0, 0, 0); font-family: "Helvetica Neue", Helvetica, Arial, Verdana, sans-serif; font-size: 31px; font-weight: bold; line-height: 1.5; mso-line-height-alt: 150%; text-align: center; letter-spacing: 0px; direction: ltr; }
.mceText a, .mcnTextContent a { color: rgb(0, 0, 0); font-style: normal; font-weight: normal; text-decoration: underline; direction: ltr; }
@media only screen and (max-width: 480px) {
  .mceText p { margin: 0px; font-size: 16px !important; line-height: 1.5 !important; mso-line-height-alt: 150%; }
  .mceText h1 { font-size: 31px !important; line-height: 1.5 !important; mso-line-height-alt: 150%; }
  .bodyCell { padding-left: 16px !important; padding-right: 16px !important; }
}
</style>
</head>
<body>
<center>
<table border="0" cellpadding="0" cellspacing="0" height="100%" width="100%" id="bodyTable" style="background-color: rgb(244, 244, 244);">
<tbody><tr>
<td class="bodyCell" align="center" valign="top">
<table id="root" border="0" cellpadding="0" cellspacing="0" width="100%">
<tbody><tr><td style="background-color:transparent" valign="top" align="center" class="mceSectionHeader">
<table border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:660px" role="presentation">
<tbody><tr><td style="background-color:#ffffff" valign="top" class="mceWrapperInner">
<table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" role="presentation">
<tbody><tr class="mceRow"><td style="background-position:center;background-repeat:no-repeat;background-size:cover" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="100%" role="presentation">
<tbody><tr><td style="padding-top:12px;padding-bottom:12px;padding-right:48px;padding-left:48px" valign="top" class="mceImageBlockContainer" align="center">
<a href="https://glowvietnam.com" style="display:block" target="_blank">
<table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="border-collapse:separate;margin:0;vertical-align:top;max-width:130px;width:100%;height:auto" role="presentation">
<tbody><tr><td style="border:0;border-radius:0;margin:0" valign="top">
<img alt="Glow Logo" src="${CONFIG.COMPANY_INFO.LOGO_URL}" width="130" height="auto" style="display:block;max-width:100%;height:auto;border-radius:0" class="mceLogo">
</td></tr></tbody></table></a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody>
<tbody><tr><td style="background-color:transparent" valign="top" align="center" class="mceSectionBody">
<table border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:660px" role="presentation">
<tbody><tr><td style="background-color:#ffffff" valign="top" class="mceWrapperInner">
<table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" role="presentation">
<tbody><tr class="mceRow"><td style="background-position:center;background-repeat:no-repeat;background-size:cover" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="100%" role="presentation">
<tbody><tr><td style="padding-top:0;padding-bottom:0;padding-right:0;padding-left:0" valign="top">
<table width="100%" style="border:0;border-radius:0;border-collapse:separate">
<tbody><tr><td style="padding-left:24px;padding-right:24px;padding-top:12px;padding-bottom:12px" class="mceTextBlockContainer">
<div class="mceText" style="width:100%">
<h1>Xác nhận đăng ký Kỹ thuật viên</h1>
<p>Xin chào <strong>${data.name}</strong>,</p>
<p>Cảm ơn bạn đã quan tâm đến vị trí Kỹ thuật viên tại Glow. Chúng tôi đã nhận được thông tin đăng ký của bạn.</p>
<p style="text-align: center;"><strong>Thông tin của bạn:</strong></p>
<p style="text-align: center;">Họ và tên: ${data.name}</p>
<p style="text-align: center;">Email: ${data.email}</p>
<p style="text-align: center;">Số điện thoại: ${data.phone}</p>
<p style="text-align: center;"><br></p>
<p style="text-align: center;"><strong>Các bước tiếp theo:</strong></p>
<p style="text-align: center;">1. Đội ngũ tuyển dụng sẽ xem xét hồ sơ của bạn</p>
<p style="text-align: center;">2. Nếu phù hợp, chúng tôi sẽ liên hệ để phỏng vấn</p>
<p style="text-align: center;">3. Trao đổi về các điều khoản hợp tác</p>
<p style="text-align: center;">4. Ký kết hợp đồng và bắt đầu công việc</p>
<p style="text-align: center;"><br></p>
<p style="text-align: center;">Trong thời gian chờ đợi, bạn có thể tìm hiểu thêm về Glow qua website của chúng tôi.</p>
<p style="text-align: center;" class="last-child">
<a href="${CONFIG.COMPANY_INFO.SOCIAL_LINKS.WEBSITE}" target="_blank">${CONFIG.COMPANY_INFO.SOCIAL_LINKS.WEBSITE}</a>
</p>
</div></td></tr></tbody></table></td></tr>
<tr><td style="background-color:transparent;padding-top:20px;padding-bottom:20px;padding-right:24px;padding-left:24px" valign="top" class="mceDividerBlockContainer">
<table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="background-color:transparent;width:100%" role="presentation" class="mceDividerContainer">
<tbody><tr><td style="min-width:100%;border-top-width:2px;border-top-style:solid;border-top-color:#000000;line-height:0;font-size:0" valign="top" class="mceDividerBlock"> </td></tr></tbody></table></td></tr>
<tr><td style="padding-top:12px;padding-bottom:12px;padding-right:0;padding-left:0" valign="top" class="mceLayoutContainer">
<table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" role="presentation">
<tbody><tr class="mceRow"><td style="background-position:center;background-repeat:no-repeat;background-size:cover" valign="top">
<table border="0" cellpadding="0" cellspacing="24" width="100%" role="presentation">
<tbody><tr><td valign="top" class="mceColumn" colspan="12" width="100%">
<table border="0" cellpadding="0" cellspacing="0" width="100%" role="presentation">
<tbody><tr><td valign="top" class="mceSocialFollowBlockContainer">
<table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" class="mceSocialFollowBlock">
<tbody><tr><td valign="middle" align="center">
<table align="left" border="0" cellpadding="0" cellspacing="0" style="display:inline;float:left" role="presentation">
<tbody><tr><td style="padding-top:3px;padding-bottom:3px;padding-left:12px;padding-right:12px" valign="top" class="mceSocialFollowIcon" align="center" width="40">
<a href="${CONFIG.COMPANY_INFO.SOCIAL_LINKS.FACEBOOK}" target="_blank" rel="noreferrer">
<img class="mceSocialFollowImage" width="40" height="40" alt="Facebook icon" src="https://cdn-images.mailchimp.com/icons/social-block-v3/block-icons-v3/facebook-filled-dark-40.png">
</a></td></tr></tbody></table>
<table align="left" border="0" cellpadding="0" cellspacing="0" style="display:inline;float:left" role="presentation">
<tbody><tr><td style="padding-top:3px;padding-bottom:3px;padding-left:12px;padding-right:12px" valign="top" class="mceSocialFollowIcon" align="center" width="40">
<a href="${CONFIG.COMPANY_INFO.SOCIAL_LINKS.LINKEDIN}" target="_blank" rel="noreferrer">
<img class="mceSocialFollowImage" width="40" height="40" alt="LinkedIn icon" src="https://cdn-images.mailchimp.com/icons/social-block-v3/block-icons-v3/linkedin-filled-dark-40.png">
</a></td></tr></tbody></table>
<table align="left" border="0" cellpadding="0" cellspacing="0" style="display:inline;float:left" role="presentation">
<tbody><tr><td style="padding-top:3px;padding-bottom:3px;padding-left:12px;padding-right:12px" valign="top" class="mceSocialFollowIcon" align="center" width="40">
<a href="${CONFIG.COMPANY_INFO.SOCIAL_LINKS.WEBSITE}" target="_blank" rel="noreferrer">
<img class="mceSocialFollowImage" width="40" height="40" alt="Website icon" src="https://cdn-images.mailchimp.com/icons/social-block-v3/block-icons-v3/website-filled-dark-40.png">
</a></td></tr></tbody></table>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>
</td>
</tr>
</tbody></table>
</center>
</body></html>`;
}

/**
 * Tạo template email cho Đối tác - DEPRECATED
 */
function createPartnerEmailBody(data) { // This function is no longer used
  return `<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Glow - Xác nhận đăng ký Đối tác</title>
<style>
body, #bodyTable { background-color: rgb(244, 244, 244); }
.mceText, .mcnTextContent, .mceLabel { font-family: "Helvetica Neue", Helvetica, Arial, Verdana, sans-serif; }
.mceText, .mcnTextContent, .mceLabel { color: rgb(0, 0, 0); }
.mceText h1 { margin-bottom: 0px; }
.mceText p { margin-bottom: 0px; }
.mceText label { margin-bottom: 0px; }
.mceText input { margin-bottom: 0px; }
.mceText h1 { margin-bottom: 0px; }
.mceText p { margin-bottom: 0px; }
.mceText label { margin-bottom: 0px; }
.mceText input { margin-bottom: 0px; }
.mceText p, .mcnTextContent p { color: rgb(0, 0, 0); font-family: "Helvetica Neue", Helvetica, Arial, Verdana, sans-serif; font-size: 16px; font-weight: normal; line-height: 1.5; mso-line-height-alt: 150%; text-align: center; letter-spacing: 0px; direction: ltr; margin: 0px; }
.mceText h1, .mcnTextContent h1 { color: rgb(0, 0, 0); font-family: "Helvetica Neue", Helvetica, Arial, Verdana, sans-serif; font-size: 31px; font-weight: bold; line-height: 1.5; mso-line-height-alt: 150%; text-align: center; letter-spacing: 0px; direction: ltr; }
.mceText a, .mcnTextContent a { color: rgb(0, 0, 0); font-style: normal; font-weight: normal; text-decoration: underline; direction: ltr; }
@media only screen and (max-width: 480px) {
  .mceText p { margin: 0px; font-size: 16px !important; line-height: 1.5 !important; mso-line-height-alt: 150%; }
  .mceText h1 { font-size: 31px !important; line-height: 1.5 !important; mso-line-height-alt: 150%; }
  .bodyCell { padding-left: 16px !important; padding-right: 16px !important; }
}
</style>
</head>
<body>
<center>
<table border="0" cellpadding="0" cellspacing="0" height="100%" width="100%" id="bodyTable" style="background-color: rgb(244, 244, 244);">
<tbody><tr>
<td class="bodyCell" align="center" valign="top">
<table id="root" border="0" cellpadding="0" cellspacing="0" width="100%">
<tbody><tr><td style="background-color:transparent" valign="top" align="center" class="mceSectionHeader">
<table border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:660px" role="presentation">
<tbody><tr><td style="background-color:#ffffff" valign="top" class="mceWrapperInner">
<table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" role="presentation">
<tbody><tr class="mceRow"><td style="background-position:center;background-repeat:no-repeat;background-size:cover" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="100%" role="presentation">
<tbody><tr><td style="padding-top:12px;padding-bottom:12px;padding-right:48px;padding-left:48px" valign="top" class="mceImageBlockContainer" align="center">
<a href="https://glowvietnam.com" style="display:block" target="_blank">
<table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="border-collapse:separate;margin:0;vertical-align:top;max-width:130px;width:100%;height:auto" role="presentation">
<tbody><tr><td style="border:0;border-radius:0;margin:0" valign="top">
<img alt="Glow Logo" src="${CONFIG.COMPANY_INFO.LOGO_URL}" width="130" height="auto" style="display:block;max-width:100%;height:auto;border-radius:0" class="mceLogo">
</td></tr></tbody></table></a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody>
<tbody><tr><td style="background-color:transparent" valign="top" align="center" class="mceSectionBody">
<table border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:660px" role="presentation">
<tbody><tr><td style="background-color:#ffffff" valign="top" class="mceWrapperInner">
<table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" role="presentation">
<tbody><tr class="mceRow"><td style="background-position:center;background-repeat:no-repeat;background-size:cover" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="100%" role="presentation">
<tbody><tr><td style="padding-top:0;padding-bottom:0;padding-right:0;padding-left:0" valign="top">
<table width="100%" style="border:0;border-radius:0;border-collapse:separate">
<tbody><tr><td style="padding-left:24px;padding-right:24px;padding-top:12px;padding-bottom:12px" class="mceTextBlockContainer">
<div class="mceText" style="width:100%">
<h1>Xác nhận đăng ký Đối tác</h1>
<p>Xin chào <strong>${data.name}</strong>,</p>
<p>Cảm ơn bạn đã quan tâm đến chương trình Đối tác của Glow. Chúng tôi rất vui mừng về cơ hội hợp tác với bạn.</p>
<p style="text-align: center;"><strong>Thông tin của bạn:</strong></p>
<p style="text-align: center;">Họ và tên: ${data.name}</p>
<p style="text-align: center;">Email: ${data.email}</p>
<p style="text-align: center;">Số điện thoại: ${data.phone}</p>
<p style="text-align: center;"><br></p>
<p style="text-align: center;"><strong>Quy trình hợp tác:</strong></p>
<p style="text-align: center;">1. Đội ngũ phát triển đối tác sẽ liên hệ với bạn</p>
<p style="text-align: center;">2. Trao đổi về mô hình hợp tác và lợi ích</p>
<p style="text-align: center;">3. Thảo luận về các điều khoản hợp tác</p>
<p style="text-align: center;">4. Ký kết hợp đồng đối tác</p>
<p style="text-align: center;"><br></p>
<p style="text-align: center;">Trong thời gian chờ đợi, bạn có thể tham khảo thêm về các chương trình đối tác của Glow trên website của chúng tôi.</p>
<p style="text-align: center;" class="last-child">
<a href="${CONFIG.COMPANY_INFO.SOCIAL_LINKS.WEBSITE}" target="_blank">${CONFIG.COMPANY_INFO.SOCIAL_LINKS.WEBSITE}</a>
</p>
</div></td></tr></tbody></table></td></tr>
<tr><td style="background-color:transparent;padding-top:20px;padding-bottom:20px;padding-right:24px;padding-left:24px" valign="top" class="mceDividerBlockContainer">
<table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="background-color:transparent;width:100%" role="presentation" class="mceDividerContainer">
<tbody><tr><td style="min-width:100%;border-top-width:2px;border-top-style:solid;border-top-color:#000000;line-height:0;font-size:0" valign="top" class="mceDividerBlock"> </td></tr></tbody></table></td></tr>
<tr><td style="padding-top:12px;padding-bottom:12px;padding-right:0;padding-left:0" valign="top" class="mceLayoutContainer">
<table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" role="presentation">
<tbody><tr class="mceRow"><td style="background-position:center;background-repeat:no-repeat;background-size:cover" valign="top">
<table border="0" cellpadding="0" cellspacing="24" width="100%" role="presentation">
<tbody><tr><td valign="top" class="mceColumn" colspan="12" width="100%">
<table border="0" cellpadding="0" cellspacing="0" width="100%" role="presentation">
<tbody><tr><td valign="top" class="mceSocialFollowBlockContainer">
<table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" class="mceSocialFollowBlock">
<tbody><tr><td valign="middle" align="center">
<table align="left" border="0" cellpadding="0" cellspacing="0" style="display:inline;float:left" role="presentation">
<tbody><tr><td style="padding-top:3px;padding-bottom:3px;padding-left:12px;padding-right:12px" valign="top" class="mceSocialFollowIcon" align="center" width="40">
<a href="${CONFIG.COMPANY_INFO.SOCIAL_LINKS.FACEBOOK}" target="_blank" rel="noreferrer">
<img class="mceSocialFollowImage" width="40" height="40" alt="Facebook icon" src="https://cdn-images.mailchimp.com/icons/social-block-v3/block-icons-v3/facebook-filled-dark-40.png">
</a></td></tr></tbody></table>
<table align="left" border="0" cellpadding="0" cellspacing="0" style="display:inline;float:left" role="presentation">
<tbody><tr><td style="padding-top:3px;padding-bottom:3px;padding-left:12px;padding-right:12px" valign="top" class="mceSocialFollowIcon" align="center" width="40">
<a href="${CONFIG.COMPANY_INFO.SOCIAL_LINKS.LINKEDIN}" target="_blank" rel="noreferrer">
<img class="mceSocialFollowImage" width="40" height="40" alt="LinkedIn icon" src="https://cdn-images.mailchimp.com/icons/social-block-v3/block-icons-v3/linkedin-filled-dark-40.png">
</a></td></tr></tbody></table>
<table align="left" border="0" cellpadding="0" cellspacing="0" style="display:inline;float:left" role="presentation">
<tbody><tr><td style="padding-top:3px;padding-bottom:3px;padding-left:12px;padding-right:12px" valign="top" class="mceSocialFollowIcon" align="center" width="40">
<a href="${CONFIG.COMPANY_INFO.SOCIAL_LINKS.WEBSITE}" target="_blank" rel="noreferrer">
<img class="mceSocialFollowImage" width="40" height="40" alt="Website icon" src="https://cdn-images.mailchimp.com/icons/social-block-v3/block-icons-v3/website-filled-dark-40.png">
</a></td></tr></tbody></table>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>
</td>
</tr>
</tbody></table>
</center>
</body></html>`;
}

/**
 * Gửi email thông báo
 */
function sendEmails(data) {
  console.log('DEBUG - Input data received:', JSON.stringify(data, null, 2));

  // Kiểm tra dữ liệu đầu vào
  if (!data || typeof data !== 'object') {
    console.error('DEBUG - Invalid data:', data);
    throw new Error('Không có dữ liệu được gửi');
  }

  // Kiểm tra các trường bắt buộc
  const requiredFields = ['name', 'phone'];
  const missingFields = requiredFields.filter(field => !data[field]);
  if (missingFields.length > 0) {
    console.error('DEBUG - Missing required fields:', missingFields);
    throw new Error(`Thiếu thông tin: ${missingFields.join(', ')}`);
  }

  // Kiểm tra cấu hình email
  if (!CONFIG.ADMIN_EMAIL) {
    console.error('DEBUG - Missing admin email configuration');
    throw new Error('Chưa cấu hình email admin');
  }

  try {
    // Gửi email cho admin (bắt buộc)
    console.log('DEBUG - Preparing admin email...');
    const adminEmailBody = createAdminEmailBody(data);
    console.log('DEBUG - Admin email body created successfully');

    GmailApp.sendEmail(
      CONFIG.ADMIN_EMAIL,
      `Đăng ký mới: Kỹ thuật viên - ${data.name}`,
      'Vui lòng sử dụng email client hỗ trợ HTML để xem nội dung email này.',
      {
        htmlBody: adminEmailBody,
        name: 'Glow Website Notification'
      }
    );
    console.log('✓ Đã gửi email cho admin:', CONFIG.ADMIN_EMAIL);

    // Gửi email cho người dùng (nếu có)
    const userEmail = data.email ? data.email.trim() : '';
    if (userEmail) {
      console.log('DEBUG - Preparing user email...');
      const userEmailBody = createTechnicianEmailBody(data);
      console.log('DEBUG - User email body created successfully');

      GmailApp.sendEmail(
        userEmail,
        'Xác nhận đăng ký Kỹ thuật viên - Glow',
        'Vui lòng sử dụng email client hỗ trợ HTML để xem nội dung email này.',
        {
          htmlBody: userEmailBody,
          name: 'Glow Team'
        }
      );
      console.log('✓ Đã gửi email cho người dùng:', userEmail);
    } else {
      console.log('i Bỏ qua gửi email cho người dùng (không có email)');
    }

    return true; // Trả về true nếu gửi email thành công
  } catch (error) {
    console.error('DEBUG - Error in sendEmails:', error);
    throw new Error('Lỗi gửi email: ' + error.message);
  }
}

/**
 * Tạo nội dung email cho admin
 */
function createAdminEmailBody(data) {
  return `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <h2 style="color: #333;">Thông tin đăng ký mới</h2>
      <div style="background: #f5f5f5; padding: 15px; border-radius: 5px; margin: 20px 0;">
        <p><strong>Thời gian:</strong> ${new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' })}</p>
        <p><strong>Họ và tên:</strong> ${data.name}</p>
        <p><strong>Email:</strong> ${data.email || 'Không cung cấp'}</p>
        <p><strong>Số điện thoại:</strong> ${data.phone}</p>
        <p><strong>Tỉnh/Thành phố:</strong> ${data.province}</p>
        <p><strong>Kinh nghiệm:</strong> ${data.experience === 'experienced' ? 'Đã có kinh nghiệm' : 'Chưa có kinh nghiệm'}</p>
        ${data.experience === 'experienced' && data.yearsOfExperience ? `<p><strong>Số năm kinh nghiệm:</strong> ${data.yearsOfExperience} năm</p>` : ''}
        ${data.question ? `<p><strong>Câu hỏi thêm:</strong> ${data.question}</p>` : ''}
        <p><strong>Đồng ý nhận marketing:</strong> ${data.agreedToMarketing ? 'Có' : 'Không'}</p>
      </div>
      <p>Vui lòng liên hệ với ứng viên trong thời gian sớm nhất.</p>
    </div>
  `;
}

/**
 * Validate dữ liệu form
 */
function validateFormData(data) {
  if (!data) throw new Error('Không có dữ liệu được gửi');
  if (!data.name) throw new Error('Thiếu thông tin họ tên');
  if (!data.phone) throw new Error('Thiếu thông tin số điện thoại');
  if (!data.province) throw new Error('Thiếu thông tin tỉnh/thành phố');
  if (!data.experience) throw new Error('Thiếu thông tin kinh nghiệm');
  
  // Email is now optional, so we don't validate it if it's empty
  if (data.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.email)) {
    throw new Error('Email không đúng định dạng');
  }
  
  // Validate years of experience if provided
  if (data.experience === 'experienced' && data.yearsOfExperience && Number(data.yearsOfExperience) < 1) {
    throw new Error('Số năm kinh nghiệm phải từ 1 năm trở lên');
  }
}

/**
 * Lưu dữ liệu vào Google Spreadsheet
 */
function saveToSpreadsheet(data) {
  try {
    const ss = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID);
    const sheet = ss.getActiveSheet();
    const lastRow = sheet.getLastRow();
    
    const timestamp = new Date().toLocaleDateString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' });
    
    const rowData = [
      timestamp,
      data.name || '',
      data.email || '',
      data.phone || '',
      data.province || '',
      data.experience === 'experienced' ? 'Đã có kinh nghiệm' : 'Chưa có kinh nghiệm',
      data.yearsOfExperience || '',
      data.question || '',
      data.agreedToMarketing ? 'Có' : 'Không'
    ];
    
    sheet.getRange(lastRow + 1, 1, 1, rowData.length).setValues([rowData]);
    console.log('Đã lưu dữ liệu vào spreadsheet thành công');
  } catch (error) {
    console.error('Lỗi khi lưu vào spreadsheet:', error);
    throw new Error('Không thể lưu dữ liệu vào spreadsheet: ' + error.message);
  }
}

/**
 * Thiết lập ban đầu cho spreadsheet
 */
function setupSpreadsheet() {
  try {
    const ss = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID);
    const sheet = ss.getActiveSheet();
    
    const headers = [
      'Thời gian',
      'Họ và tên',
      'Email',
      'Số điện thoại',
      'Tỉnh/Thành phố',
      'Kinh nghiệm',
      'Số năm kinh nghiệm',
      'Câu hỏi thêm',
      'Đồng ý nhận marketing'
    ];
    
    // Set headers
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    
    // Format headers
    const headerRange = sheet.getRange(1, 1, 1, headers.length);
    headerRange.setFontWeight('bold')
               .setBackground('#E8EAED')
               .setHorizontalAlignment('center');
    
    // Freeze header row
    sheet.setFrozenRows(1);
    
    // Auto-resize columns
    sheet.autoResizeColumns(1, headers.length);
    
    // Add data validation and formatting
    sheet.getRange(2, 1, 999, headers.length)
         .setHorizontalAlignment('left')
         .setWrap(true);
    
    console.log('Đã thiết lập spreadsheet thành công');
    return 'Thiết lập spreadsheet thành công!';
  } catch (error) {
    console.error('Lỗi khi thiết lập spreadsheet:', error);
    throw new Error('Không thể thiết lập spreadsheet: ' + error.message);
  }
}

/**
 * Test cấu hình
 */
function testConfiguration() {
  console.log('=== BẮT ĐẦU TEST CONFIGURATION ===');

  try {
    // 1. Kiểm tra cấu hình admin email
    if (!CONFIG.ADMIN_EMAIL || CONFIG.ADMIN_EMAIL === 'your-admin-email@example.com') {
      throw new Error('Vui lòng cấu hình ADMIN_EMAIL trước khi test');
    }
    console.log('✓ Cấu hình admin email OK:', CONFIG.ADMIN_EMAIL);

    // 2. Tạo mock request data
    const mockPostData = {
      postData: {
        contents: JSON.stringify({
          name: "Nguyễn Văn Test",
          email: "test@example.com",
          phone: "0123456789",
          province: "TP Hồ Chí Minh",
          experience: "experienced",
          yearsOfExperience: "5",
          question: "Tôi muốn biết thêm về chế độ làm việc.",
          agreedToMarketing: true
        })
      }
    };
    console.log('✓ Tạo mock data OK');

    // 3. Test processFormData
    console.log('\n1. Test xử lý dữ liệu:');
    const processedData = processFormData(JSON.parse(mockPostData.postData.contents));
    console.log('✓ Xử lý dữ liệu OK:', JSON.stringify(processedData, null, 2));

    // 4. Test doPost
    console.log('\n2. Test toàn bộ luồng xử lý:');
    const response = doPost(mockPostData);
    const result = JSON.parse(response.getContent());
    
    console.log('Kết quả:', JSON.stringify(result, null, 2));
    
    if (result.status === 'success') {
      console.log('✓ Test thành công!');
      return 'Tất cả chức năng hoạt động tốt!';
    } else if (result.status === 'partial') {
      console.warn('⚠ Test thành công một phần:', result.message);
      return 'Một số chức năng hoạt động, một số bị lỗi. Kiểm tra logs để biết chi tiết.';
    } else {
      throw new Error(result.message);
    }

  } catch (error) {
    console.error('✗ Test thất bại:', error.message);
    return `Lỗi: ${error.message}`;
  } finally {
    console.log('\n=== KẾT THÚC TEST CONFIGURATION ===');
  }
}

/**
 * Test hàm sendEmails với nhiều trường hợp khác nhau
 */
function testSendEmails() {
  // Tạo các test case
  const testCases = [
    {
      name: "Case 1: Đầy đủ thông tin hợp lệ",
      data: {
        name: "Nguyễn Văn A",
        email: "test@example.com",
        phone: "0123456789",
        province: "TP Hồ Chí Minh",
        experience: "experienced",
        yearsOfExperience: "5",
        question: "Tôi muốn biết thêm về chế độ làm việc.",
        agreedToMarketing: true
      },
      expectSuccess: true
    },
    {
      name: "Case 2: Không có email (hợp lệ)",
      data: {
        name: "Trần Thị B",
        email: "",
        phone: "0987654321",
        province: "Hà Nội",
        experience: "no_experience",
        yearsOfExperience: "",
        question: "Tôi có thể bắt đầu làm việc ngay không?",
        agreedToMarketing: false
      },
      expectSuccess: true
    },
    {
      name: "Case 3: Thiếu tên (không hợp lệ)",
      data: {
        email: "test@example.com",
        phone: "0123456789",
        province: "TP Hồ Chí Minh",
        experience: "experienced",
        yearsOfExperience: "5",
        agreedToMarketing: true
      },
      expectSuccess: false,
      expectedError: "Thiếu thông tin cơ bản (tên/số điện thoại)"
    },
    {
      name: "Case 4: Thiếu số điện thoại (không hợp lệ)",
      data: {
        name: "Lê Văn C",
        email: "test@example.com",
        province: "Đà Nẵng",
        experience: "experienced",
        yearsOfExperience: "2",
        agreedToMarketing: true
      },
      expectSuccess: false,
      expectedError: "Thiếu thông tin cơ bản (tên/số điện thoại)"
    },
    {
      name: "Case 5: Email không hợp lệ (vẫn hợp lệ vì email không bắt buộc)",
      data: {
        name: "Phạm Thị D",
        email: "not-an-email",
        phone: "0123498765",
        province: "Hải Phòng",
        experience: "experienced",
        yearsOfExperience: "10",
        agreedToMarketing: true
      },
      expectSuccess: true
    },
    {
      name: "Case 6: Dữ liệu null (không hợp lệ)",
      data: null,
      expectSuccess: false,
      expectedError: "Không có dữ liệu được gửi"
    }
  ];

  // Chạy test từng case
  console.log("=== BẮT ĐẦU TEST SEND EMAILS ===\n");
  
  let passedTests = 0;
  let failedTests = 0;
  
  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    console.log(`--- Test case ${i + 1}: ${testCase.name} ---`);
    
    try {
      sendEmails(testCase.data);
      
      if (testCase.expectSuccess) {
        console.log("✓ PASS: Gửi email thành công như mong đợi");
        passedTests++;
      } else {
        console.log("✗ FAIL: Gửi email thành công trong khi mong đợi thất bại");
        console.log("  Mong đợi lỗi:", testCase.expectedError);
        failedTests++;
      }
    } catch (error) {
      if (!testCase.expectSuccess && error.message.includes(testCase.expectedError)) {
        console.log("✓ PASS: Nhận được lỗi mong đợi:", error.message);
        passedTests++;
      } else if (testCase.expectSuccess) {
        console.log("✗ FAIL: Gửi email thất bại trong khi mong đợi thành công");
        console.log("  Lỗi nhận được:", error.message);
        failedTests++;
      } else {
        console.log("✗ FAIL: Lỗi nhận được khác với mong đợi");
        console.log("  Mong đợi:", testCase.expectedError);
        console.log("  Nhận được:", error.message);
        failedTests++;
      }
    }
    
    console.log(""); // Dòng trống giữa các test case
  }
  
  console.log("=== KẾT QUẢ TEST SEND EMAILS ===");
  console.log(`Tổng số test: ${testCases.length}`);
  console.log(`Số test thành công: ${passedTests}`);
  console.log(`Số test thất bại: ${failedTests}`);
  
  return {
    total: testCases.length,
    passed: passedTests,
    failed: failedTests
  };
}

/**
 * Test gửi email với data test đầy đủ
 */
function testEmailWithFullData() {
  const testData = createTestData(true);
  try {
    console.log('Test gửi email với data đầy đủ:');
    console.log('Test data:', JSON.stringify(testData, null, 2));
    sendEmails(testData);
    return 'Test gửi email thành công!';
  } catch (error) {
    console.error('Lỗi khi test:', error);
    return `Lỗi: ${error.toString()}`;
  }
}

/**
 * Tạo test data với đầy đủ thông tin
 */
function createTestData(includeEmail = true) {
  return {
    name: 'Nguyễn Văn Test',
    email: includeEmail ? 'test@example.com' : '',
    phone: '0123456789',
    province: 'TP Hồ Chí Minh',
    experience: 'experienced',
    yearsOfExperience: '3',
    question: 'Tôi muốn biết thêm về chế độ làm việc và thu nhập.',
    agreedToMarketing: true
  };
}

/**
 * Test email với template mới
 */
function testEmailTemplate() {
  const testData = createTestData();

  try {
    const emailBody = createTechnicianEmailBody(testData);
    
    GmailApp.sendEmail(
      testData.email,
      'Test Email Template - Glow',
      'Vui lòng sử dụng email client hỗ trợ HTML để xem nội dung email này.',
      {
        htmlBody: emailBody,
        name: 'Glow Team'
      }
    );
    
    console.log('Test email sent successfully');
    return 'Gửi email test thành công!';
  } catch (error) {
    console.error('Error sending test email:', error);
    return `Lỗi: ${error.toString()}`;
  }
}

/**
 * Test email với logo
 */
function testEmailWithLogo() {
  const testData = createTestData();
  
  try {
    const emailBody = createTechnicianEmailBody(testData);
    console.log('Email template with logo generated successfully');
    
    // Test gửi email
    GmailApp.sendEmail(
      testData.email,
      'Test Email với Logo - Glow',
      'Vui lòng sử dụng email client hỗ trợ HTML để xem nội dung email này.',
      {
        htmlBody: emailBody,
        name: 'Glow Team'
      }
    );
    
    console.log('Test email sent successfully');
  } catch (error) {
    console.error('Error testing email with logo:', error);
    throw error;
  }
}

/**
 * Function để kiểm tra và set quyền truy cập cho logo
 */
function setupLogoPermissions() {
  try {
    const fileId = CONFIG.COMPANY_INFO.LOGO_FILE_ID;
    const file = DriveApp.getFileById(fileId);
    
    // Set quyền truy cập cho file
    file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
    
    console.log('Logo permissions set successfully');
    console.log('Logo URL:', getLogoUrl());
    return 'Logo setup completed successfully!';
  } catch (error) {
    console.error('Error setting up logo:', error);
    return `Error: ${error.toString()}`;
  }
}

/**
 * Function để test URL logo
 */
function testLogoUrl() {
  const logoUrl = getLogoUrl();
  console.log('Logo URL:', logoUrl);
  
  // Test gửi email với logo
  const testData = createTestData();
  
  try {
    const emailBody = createTechnicianEmailBody(testData);
    GmailApp.sendEmail(
      testData.email,
      'Test Logo in Email - Glow',
      'Vui lòng sử dụng email client hỗ trợ HTML để xem nội dung email này.',
      {
        htmlBody: emailBody,
        name: 'Glow Team'
      }
    );
    return 'Test email sent successfully!';
  } catch (error) {
    console.error('Error:', error);
    return `Error: ${error.toString()}`;
  }
}

function getBase64FromImageUrl(url) {
  const img = new Image();
  img.crossOrigin = "anonymous";
  img.onload = function() {
    const canvas = document.createElement("canvas");
    canvas.width = img.width;
    canvas.height = img.height;
    const ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    const base64 = canvas.toDataURL("image/png");
    console.log(base64);
  };
  img.src = url;
}

// Sử dụng
// getBase64FromImageUrl('URL_LOGO_GLOW');

function getLogoUrlAlternative() {
  const fileId = CONFIG.COMPANY_INFO.LOGO_FILE_ID;
  return `https://lh3.googleusercontent.com/d/${fileId}`;
}

function znsSender(data) {
  let url = "https://business.openapi.zalo.me/message/template";

  let access_token = PROPERTY.getProperty("zns_access_token");
  if(!access_token) {
    access_token = refreshToken();
    if(!access_token) throw "Init access_token not found";
  }

  let payload = {
    // mode: "development",
    phone: standardlizeVNPhone(data.phone),
    template_id: CONFIG.TEMPLATE_ID,
    template_data: {
        name: data.name,
        date_and_time: standardlizeTime(new Date()),
        email: data.email,
        phone_number: data.phone
    }
  };
  Logger.log(payload)
  let res = UrlFetchApp.fetch(url, {
    method: "post",
    contentType: "application/json",
    headers: {
      access_token: access_token,
    },
    payload: JSON.stringify(payload)
  });
  let response = JSON.parse(res.getContentText());
  console.log(res.getContentText());
  console.log(response);
  if(response.error == -124 || response.error == -126) {
    Logger.log("refresh access")
    refreshToken();
    var newAccessToken = PROPERTY.getProperty("zns_access_token");
    if(!newAccessToken) throw "refresh_token_expired";
    if(newAccessToken) {
      res = UrlFetchApp.fetch(url, {
        method: "post",
        contentType: "application/json",
        headers: {
          access_token: newAccessToken,
        },
        payload: JSON.stringify(payload)
      });
    }
  }
}

function getInitAccessToken() {
  let url = "https://oauth.zaloapp.com/v4/oa/access_token";
  try {
    let payload = {
      app_id: CONFIG.APP_ID,
      grant_type: 'authorization_code',
      code: CONFIG.AUTH_CODE,
    }
    let headers = {
      "Content-Type": "application/x-www-form-urlencoded",
      "Secret_key": CONFIG.SECRET_KEY
    }
    let formData = Object.entries(payload)
    .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)
    .join("&");

    const options = {
      method: 'post',
      payload: formData,
      muteHttpExceptions: true,
      headers: headers
    };
    Logger.log(options);
    let res = UrlFetchApp.fetch(url, options);

    const data = JSON.parse(res.getContentText());
    Logger.log(data); 
    PROPERTY.setProperty("zns_refresh_token", data.refresh_token);
    PROPERTY.setProperty("zns_access_token", data.access_token);
  }
  catch (err) {
    Logger.log(err);
  }
}

function refreshToken() {
  let refreshToken = PROPERTY.getProperty("zns_refresh_token");
  if(!refreshToken) return null;
  let url = "https://oauth.zaloapp.com/v4/oa/access_token";
  
  let payload = {
    app_id: CONFIG.APP_ID,
    grant_type: 'refresh_token',
    refresh_token: refreshToken,
  }
  let headers = {
    "Content-Type": "application/x-www-form-urlencoded",
    "Secret_key": CONFIG.SECRET_KEY
  }
  let formData = Object.entries(payload)
  .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)
  .join("&");

  let options = {
    method: 'post',
    payload: formData,
    muteHttpExceptions: true,
    headers: headers
  };
  Logger.log(options);
  let res = UrlFetchApp.fetch(url, options);

  var data = JSON.parse(res.getContentText());
  Logger.log(data);
  PROPERTY.setProperty("zns_refresh_token", data.refresh_token);
  PROPERTY.setProperty("zns_access_token", data.access_token);

  return data.access_token
}
//test fnc
function getZnsTemplate() {
  var accessToken = PROPERTY.getProperty("zns_access_token");

  var url = "https://business.openapi.zalo.me/template/info/v2?template_id=477985";

  var options = {
    method: "get",
    headers: {
      "access_token": accessToken
    },
    muteHttpExceptions: true
  };

  var response = UrlFetchApp.fetch(url, options);
  var data = JSON.parse(response.getContentText());
  Logger.log("Danh sách template:" + JSON.stringify(data));
}

function standardlizeVNPhone(phone) {
  if(!phone) return phone;
  var cleaned = phone.toString().replace(/\D/g, '');

  if (cleaned.indexOf('0') === 0) {
    return '+84' + cleaned.substring(1);
  }

  if (cleaned.indexOf('84') === 0) {
    return '+'.concat(cleaned);
  }

  if (phone.toString().indexOf('+84') === 0) {
    return phone.toString();
  }

  return phone;
}

function standardlizeTime(dateInput) {
  if (!dateInput) return '';
  var date = (dateInput instanceof Date) ? dateInput : new Date(dateInput);
  if (isNaN(date.getTime())) {
    return '';
  }
  var hh = ('0' + date.getHours()).slice(-2);
  var mm = ('0' + date.getMinutes()).slice(-2);
  var ss = ('0' + date.getSeconds()).slice(-2);
  var dd = ('0' + date.getDate()).slice(-2);
  var MM = ('0' + (date.getMonth() + 1)).slice(-2);
  var yyyy = date.getFullYear();

  return hh + ':' + mm + ':' + ss + ' ' + dd + '/' + MM + '/' + yyyy;
}

function processFormData(formData) {
  // Validate và chuẩn hóa dữ liệu
  if (!formData || typeof formData !== 'object') {
    throw new Error('Dữ liệu không hợp lệ');
  }

  // Đảm bảo các trường bắt buộc
  const required = ['name', 'phone', 'province', 'experience'];
  const missing = required.filter(field => !formData[field]);
  if (missing.length > 0) {
    throw new Error(`Thiếu thông tin: ${missing.join(', ')}`);
  }

  // Chuẩn hóa dữ liệu
  return {
    name: formData.name.trim(),
    email: formData.email ? formData.email.trim() : '',
    phone: formData.phone.trim(),
    province: formData.province.trim(),
    experience: formData.experience.trim(),
    yearsOfExperience: formData.yearsOfExperience ? formData.yearsOfExperience.toString() : '',
    question: formData.question ? formData.question.trim() : '',
    agreedToMarketing: Boolean(formData.agreedToMarketing)
  };
}

function doPost(e) {
  console.log('=== Bắt đầu xử lý form ===');
  
  try {
    // 1. Validate request
    if (!e || !e.postData || !e.postData.contents) {
      throw new Error('Không nhận được dữ liệu');
    }

    // 2. Parse JSON
    let rawData;
    try {
      rawData = JSON.parse(e.postData.contents);
      console.log('Dữ liệu thô:', JSON.stringify(rawData, null, 2));
    } catch (error) {
      throw new Error('Dữ liệu không đúng định dạng JSON');
    }

    // 3. Xử lý và chuẩn hóa dữ liệu
    const data = processFormData(rawData);
    console.log('Dữ liệu đã xử lý:', JSON.stringify(data, null, 2));

    // 4. Thực hiện các chức năng
    const results = {
      spreadsheet: false,
      email: false,
      zns: false
    };

    // 4.1. Lưu spreadsheet
    try {
      saveToSpreadsheet(data);
      results.spreadsheet = true;
      console.log('✓ Đã lưu spreadsheet');
    } catch (error) {
      console.error('✗ Lỗi lưu spreadsheet:', error.message);
    }

    // 4.2. Gửi email
    try {
      sendEmails(data);
      results.email = true;
      console.log('✓ Đã gửi email');
    } catch (error) {
      console.error('✗ Lỗi gửi email:', error.message);
    }

    // 4.3. Gửi ZNS
    try {
      znsSender(data);
      results.zns = true;
      console.log('✓ Đã gửi ZNS');
    } catch (error) {
      console.error('✗ Lỗi gửi ZNS:', error.message);
    }

    // 5. Tổng kết kết quả
    const successCount = Object.values(results).filter(Boolean).length;
    const response = {
      status: successCount === 3 ? 'success' : (successCount > 0 ? 'partial' : 'error'),
      message: successCount === 3 
        ? 'Xử lý thành công' 
        : (successCount > 0 ? 'Xử lý một phần thành công' : 'Xử lý thất bại'),
      results: results
    };

    console.log('=== Kết thúc xử lý form ===\n');
    return ContentService.createTextOutput(JSON.stringify(response))
      .setMimeType(ContentService.MimeType.JSON);

  } catch (error) {
    console.error('✗ Lỗi:', error.message);
    const response = {
      status: 'error',
      message: error.message,
      results: { spreadsheet: false, email: false, zns: false }
    };
    
    console.log('=== Kết thúc xử lý form (có lỗi) ===\n');
    return ContentService.createTextOutput(JSON.stringify(response))
      .setMimeType(ContentService.MimeType.JSON);
  }
}